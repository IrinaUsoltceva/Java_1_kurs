package objects;

/**
 * Created by st055086 on 06.04.2018.
 */
public class StudentsExample {

    public static void main(String[] args) {
        //заведем 2 переменные, s1 и s2 для хранения студентов
        //в каждой переменной стронка и число
        //создание объекта
        Student s1 = new Student();
        Student s2 = new Student();

        //как получить доступ к name и course внутри s1 и  s2
        s1.name = "Иванов";
        s2.name = "Петров";
        s1.course = 1;
        s2.course = 2;

        System.out.println(
                s1.name + " учится на курсе " + s1.course
        );

        //Различие классов и объектов
        /*
        Класс описывает шаблон устройства объекта
        Класс говорит, что в объектах такие-то данные
        (поля) и такое-то поведение (методы)
        Класс Student всегда одн, потому что есть
        только одно описание того, как устроены студенты
        объекты - это реализации класса
        Объектов может быть любое количество, от 0 до много
        В нашей программе 2 объекта
        Объекты - это конкрентые студенты, а класс -
        это само понтие "студент"

        конструктов выделяет память дл яобъекты, вызывается оператором new: new Student
         */

        Student s3 = s1;
        System.out.println(s3.name); //Иванов
        s3.name = "Иванова";
        System.out.println(s1.name); //Иванова

        //как вызвать метод
        s1.greet(); //объект.метод(), даже если нет аргументов

        //Конструкторы. Было бы здорово создать студента.
        //сразу указав ему и имя, и курс
        Student2 ss2 = new Student2("Петрова", 3);
        ss2.greet();

        //значения полей по умолчанию
        int x;
        //System.out.println(x); - ругается

        System.out.println(new Student().course); //0
        System.out.println(new Student().name); //null
        //базовые типы по умолчанию - нули
        //объектные типы - null

        //new File ("a.txt");
        //new File ("c:/windows", "a.txt");
        //"abc asd".split(" ");
        //"abc asd".split("");

        //использование класа с приватными полями
        Student3 sss = new Student3("Васильева", 4);
        //sss.name = "..." //не работает :( name - приватный
        //System.out.println(sss.name); //тоже нет!

        /*чтобы узнать/изменить значения свойств нужен метод
        get и set методы
         */
        System.out.println(sss.genName()); //Узнать имя
        sss.setName("Васильев"); //учтановить имя

        //--------------4. Static---------------------------
        Student4 i4 = new Student4("Иванов", 1);
        Student4 p4 = new Student4("Петров", 2);
        //Объектов класса Studetn4: 2шт
        //класс Student4: 1шт
        //полей name внутри Student4: 2шт
        //(Одно - Иванов, другое Путров)
        //сколько объектов создали - столько переменных создалось

        /*
        static поле класса, в отличие от обычного поля,
        содержится в классе, а не в объекте. т.е. существует
        в единственном экземпляре

        static метод относится к классу, а не к объекту
        Вызов
         */
        System.out.println(Student4.getStudentsCount());
        //понимаем, как сделан System.out.println
        //класс System
        //out - статичевское поле (объект класса PrintStream)
        //метод println - обычный метод (не статический)

        p4.getStudentsCount();
        //метод статический, но вызывается у объекта, а не у класса
        //это работает, но так писать не рекомендуется, это нелогично

        //Math.PI - статическое поле в классе math

        /*
        ключевое слово final

        Слово final можно дописывать при определении локальной
        переменной, поля, класса, метода.
        Для переменной или поля final означает, что значение
        (переменной или поля) нельзя изменять после присваивания

        Это примерно как const в других языках
         */

        final int n = 10;
        System.out.println(n); //можно читать
        //n = 42 - нельзя изменять

        final int m; //не обязательно присваивать сразу, можно сделать и потом
        //но надо сделать присваивание перед первым обращением
        if (n > 5)
            m = 10;
        else
            m = 20;
        System.out.println(m);
    }
}
